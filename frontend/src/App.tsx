import React, { useState, useEffect } from "react";
import "./App.css";

interface LogEntry {
  id: number;
  level: string;
  message: string;
  source?: string;
  timestamp: string;
  exception?: string;
  userId?: string;
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º proxy –∏–∑ package.json, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ /api
const API_BASE = "";

function App() {
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>("");

  // –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∞
  const [newLog, setNewLog] = useState({
    level: "Info",
    message: "",
    source: "",
    exception: "",
    userId: "",
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
  const loadLogs = async () => {
    setLoading(true);
    setError("");
    try {
      const response = await fetch(`${API_BASE}/api/logs`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setLogs(data.data || []);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to load logs");
      console.error("Error loading logs:", err);
    } finally {
      setLoading(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∞
  const createLog = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newLog.message.trim()) {
      alert("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
      return;
    }

    try {
      const response = await fetch(`${API_BASE}/api/logs`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          level: newLog.level,
          message: newLog.message,
          source: newLog.source || null,
          exception: newLog.exception || null,
          userId: newLog.userId || null,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setNewLog({
        level: "Info",
        message: "",
        source: "",
        exception: "",
        userId: "",
      });

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏
      loadLogs();
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to create log");
      console.error("Error creating log:", err);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞
  const getLevelColor = (level: string) => {
    switch (level.toLowerCase()) {
      case "error":
        return "bg-red-100 text-red-800 border-red-200";
      case "warning":
        return "bg-yellow-100 text-yellow-800 border-yellow-200";
      case "info":
        return "bg-blue-100 text-blue-800 border-blue-200";
      case "debug":
        return "bg-gray-100 text-gray-800 border-gray-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleString("ru-RU");
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadLogs();
  }, []);

  return (
    <div className="app">
      <header className="app-header">
        <h1>üóÇÔ∏è LogKeeper</h1>
        <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏</p>
      </header>

      {error && <div className="error-message">‚ùå –û—à–∏–±–∫–∞: {error}</div>}

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞ */}
      <section className="create-log-section">
        <h2>‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ª–æ–≥</h2>
        <form onSubmit={createLog} className="create-log-form">
          <div className="form-row">
            <div className="form-group">
              <label>–£—Ä–æ–≤–µ–Ω—å:</label>
              <select
                value={newLog.level}
                onChange={(e) =>
                  setNewLog({ ...newLog, level: e.target.value })
                }
              >
                <option value="Debug">Debug</option>
                <option value="Info">Info</option>
                <option value="Warning">Warning</option>
                <option value="Error">Error</option>
              </select>
            </div>

            <div className="form-group">
              <label>–ò—Å—Ç–æ—á–Ω–∏–∫:</label>
              <input
                type="text"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: PaymentService"
                value={newLog.source}
                onChange={(e) =>
                  setNewLog({ ...newLog, source: e.target.value })
                }
              />
            </div>

            <div className="form-group">
              <label>User ID:</label>
              <input
                type="text"
                placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                value={newLog.userId}
                onChange={(e) =>
                  setNewLog({ ...newLog, userId: e.target.value })
                }
              />
            </div>
          </div>

          <div className="form-group">
            <label>–°–æ–æ–±—â–µ–Ω–∏–µ:*</label>
            <textarea
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏..."
              value={newLog.message}
              onChange={(e) =>
                setNewLog({ ...newLog, message: e.target.value })
              }
              required
              rows={3}
            />
          </div>

          <div className="form-group">
            <label>–ò—Å–∫–ª—é—á–µ–Ω–∏–µ (Exception):</label>
            <textarea
              placeholder="–°—Ç–µ–∫ —Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)..."
              value={newLog.exception}
              onChange={(e) =>
                setNewLog({ ...newLog, exception: e.target.value })
              }
              rows={3}
            />
          </div>

          <button type="submit" className="submit-btn">
            üìù –°–æ–∑–¥–∞—Ç—å –ª–æ–≥
          </button>
        </form>
      </section>

      {/* –°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤ */}
      <section className="logs-section">
        <div className="section-header">
          <h2>üìã –°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤</h2>
          <button onClick={loadLogs} disabled={loading} className="refresh-btn">
            {loading ? "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..." : "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"}
          </button>
        </div>

        {loading && logs.length === 0 ? (
          <div className="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
        ) : logs.length === 0 ? (
          <div className="no-logs">üìù –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ª–æ–≥!</div>
        ) : (
          <div className="logs-list">
            {logs.map((log) => (
              <div key={log.id} className="log-entry">
                <div className="log-header">
                  <span className={`log-level ${getLevelColor(log.level)}`}>
                    {log.level}
                  </span>
                  <span className="log-timestamp">
                    üïí {formatDate(log.timestamp)}
                  </span>
                  {log.source && (
                    <span className="log-source">üì¶ {log.source}</span>
                  )}
                  {log.userId && (
                    <span className="log-user">üë§ {log.userId}</span>
                  )}
                </div>

                <div className="log-message">{log.message}</div>

                {log.exception && (
                  <details className="log-exception">
                    <summary>üêõ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ</summary>
                    <pre>{log.exception}</pre>
                  </details>
                )}
              </div>
            ))}
          </div>
        )}
      </section>
    </div>
  );
}

export default App;
